When would you want to create a remote repository rather than keeping all your##
work local?

    When you'd like to keep a backup of your files elsewhere, or even share it 
    with others.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Because you're the one that should know whether your local repository is
    either ready or if it is necessary to be updated with the remote's content.
    You may not want to have your local files overwritten / wrongly merged, for
    instance.

Describe the differences between forks, clones and branches. When would you use
one instead of another?

    Clones are like straight-out copies from a repository, be it either from a 
    local or a remote one. 
    
    Branches are a different version of an existing repository, allowing you to
    freely modify it without affecting its parent.

    Forks are basically clones from someone else's repository, keeping a
    reference to the original repository.

    You would choose to clone a repository to work on it from another
    workstation; choosing a branch would fit experimental changes without
    affecting an original repository and, finally, fork to clone and keep a
    copy of someone else's repository to work on it (if you don't have access
    to it).

What is the benefit of having a copy of the last known state of the remote
store locally?

    You would be able to keep working with up-to-date files even if you don't
    have internet connectivity available at that moment.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

    I'd probably have to use network shared folders (if at work), or use a
    public Dropbox/Google Docs folder. It'd be harder to share your files, give
    access for others to also update them, even comment on changes themselves.
