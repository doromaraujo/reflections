What happens when you initialize a repository? Why do you need to do it?
    
    It creates all medatada that Git needs in order to maintain it as a 
    repository. It's necessary because you need to signal Git that it should
    keep the directory as a repository.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

    It is a cached, mirrored version of both the repository and the working
    directory. It offers a way to separate file changes into logical commits,
    rather than committing all changed files at once.

How can you use the staging area to make sure you have one commit per logical
change?

    By comparing what has been added to it, from the working directory, to the
    last commit made to the repository, enabling you to better modularize your
    changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When you want to create a new functionality in a code project or fix bugs. 
    Branches help organizing the commits' history in a way that you can keep
    working in different versions of the same code.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    It merges commits from both branches into a resulting commit, keeping the 
    history of changes made in these branches in a single one.

    It is represented in such a way to make others understand that the merge
    was made to a resulting branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    Git's automatic merges are useful in a way that it gracefully intersects
    non-conflicting changes. It isn't capable of merging conflicts easily, 
    though. As for manual merging, it lets the commiter to choose which changes
    to keep and/or discard (as it should), but it can grow tiresome if too many
    changes were made on each branch when merging.
